" Don't try to be vi compatible
set nocompatible
set cpoptions-=C

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-fugitive'
Plug 'sjl/badwolf'
Plug 'itchyny/lightline.vim'
Plug 'tsuyoshicho/StatuslineUpdateTimer.vim'
Plug 'pseewald/vim-anyfold'
Plug 'vim-scripts/indentpython.vim'
Plug 'jupyter-vim/jupyter-vim'
Plug 'JuliaEditorSupport/julia-vim'
Plug 'https://github.com/machakann/vim-swap.git'
Plug 'pangloss/vim-javascript'
Plug 'mbbill/undotree'
Plug 'lambdalisue/suda.vim'

if has('nvim')
    " LSP and completion
    Plug 'williamboman/mason.nvim'
    Plug 'williamboman/mason-lspconfig.nvim'
    Plug 'neovim/nvim-lspconfig'
    
    " Completion engine
    Plug 'hrsh7th/nvim-cmp'
    Plug 'hrsh7th/cmp-nvim-lsp'
    Plug 'hrsh7th/cmp-buffer'
    Plug 'hrsh7th/cmp-path'
    Plug 'saadparwaiz1/cmp_luasnip'
    
    " Snippets
    Plug 'L3MON4D3/LuaSnip', {'tag': 'v2.3.0', 'do': 'make install_jsregexp'}
    Plug 'rafamadriz/friendly-snippets'
    
    " UI enhancements
    Plug 'nvim-tree/nvim-web-devicons'
    
    Plug 'rktjmp/lush.nvim'
    Plug 'nvim-telescope/telescope.nvim'
    Plug 'nvim-telescope/telescope-media-files.nvim'
    Plug 'nvim-lua/plenary.nvim'
    Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release && cmake --build build --config Release && cmake --install build --prefix build' }
    Plug 'nvim-telescope/telescope-live-grep-args.nvim'
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
    Plug 'kylechui/nvim-surround'
    Plug 'neomake/neomake'
    Plug 'mfussenegger/nvim-dap'
    Plug 'nvim-neotest/nvim-nio'
    Plug 'rcarriga/nvim-dap-ui'
    Plug 'theHamsta/nvim-dap-virtual-text'
    Plug 'folke/lazydev.nvim'
    Plug 'folke/neodev.nvim'
    Plug 'stevearc/conform.nvim'
    Plug 'b0o/schemastore.nvim'

    Plug 'lewis6991/gitsigns.nvim'
    Plug 'sindrets/diffview.nvim'
else
    Plug 'Valloric/YouCompleteMe'
    Plug 'bfrg/vim-cpp-modern'
    Plug 'psf/black', { 'branch': 'stable' }
    Plug 'rhysd/vim-clang-format'
    Plug 'tomtom/tcomment_vim'
    Plug 'prettier/vim-prettier', {
                \ 'do': 'yarn install --frozen-lockfile --production',
                \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'svelte', 'yaml', 'html'] }
    Plug 'LucHermitte/lh-vim-lib'
    Plug 'LucHermitte/lh-style'
    Plug 'LucHermitte/lh-tags'
    Plug 'LucHermitte/lh-dev'
    Plug 'LucHermitte/lh-brackets'
    Plug 'LucHermitte/searchInRuntime'
    Plug 'LucHermitte/mu-template'
    Plug 'LucHermitte/alternate-lite'
    Plug 'LucHermitte/lh-cpp'
endif

" Initialize plugin system
call plug#end()

" Turn on syntax highlighting
syntax on
syntax enable

" Status line settings
set noshowmode
let g:StatuslineUpdateTimer#clockformat = '%H:%M'
let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'active': {
      \   'left': [
      \     [ 'mode', 'paste' ],
      \     [ 'readonly', 'filename', 'modified' ]
      \   ],
      \   'right': [
      \     ['clock'],
      \     ['lineinfo', 'percent'],
      \   ]
      \ },
      \ 'component_function': {
      \   'clock': 'StatuslineUpdateTimer#clock',
      \ },
      \ }

" Make the tab line darker than the background.
colorscheme badwolf
let g:badwolf_tabline = 2
set termguicolors

" Color scheme (terminal)
set t_Co=256
set background=dark
let g:solarized_termcolors=256
let g:solarized_termtrans=1


" For plugins to load correctly
filetype plugin indent on

" TODO: Pick a leader key
let mapleader = ","

" Security
" set modelines=0

" Show line numbers
set number
"Set relative numbers
set number relativenumber

" Show file stats
set ruler

" Blink cursor on error instead of beeping (grr)
set visualbell

" Encoding
set encoding=utf-8

" Whitespace
set wrap
set textwidth=79
set formatoptions=tcqrn1
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set noshiftround
set autoindent
set smartindent

" Cursor motion
set scrolloff=3
set backspace=indent,eol,start
set matchpairs+=<:> " use % to jump between pairs
runtime! macros/matchit.vim

" Move up/down editor lines
nnoremap j gj
nnoremap k gk

" Allow hidden buffers
set hidden

" Rendering
set ttyfast

" Status bar
set laststatus=2

" Last line
set showmode
set showcmd

" Searching
nnoremap / /\v
vnoremap / /\v
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch
nnoremap * *``
map <leader><space> :let @/=''<cr> " clear search

" Remap help key.
" inoremap <F1> <ESC>:set invfullscreen<CR>a
" nnoremap <F1> :set invfullscreen<CR>
" vnoremap <F1> :set invfullscreen<CR>

" Maintain undo history between sessions
set undofile   
set undodir=~/.vim/undodir

" Visualize tabs and newlines
set listchars=tab:▸\ ,eol:¬
" Uncomment this to enable by default:
" set list " To enable by default
" Or use your leader key + l to toggle on/off
map <leader>l :set list!<CR> " Toggle tabs and EOL

"No templates when new file is created"
let g:mt_IDontWantTemplatesAutomaticallyInserted = 1

" fix meta-keys which generate <Esc>a .. <Esc>z
if !has('nvim')
    let c='a'
    while c <= 'z'
      exec "set <M-".toupper(c).">=\e".c
      exec "imap \e".c." <M-".toupper(c).">"
      let c = nr2char(1+char2nr(c))
    endw
    set <M-1>=^[1

    " C++ syntax highlighting
    let g:cpp_attributes_highlight = 1
    let g:cpp_member_highlight = 1
    let g:cpp_simple_highlight = 1

    " Formatting
    autocmd BufWritePre *.h,*.cc,*.cpp,*.cu,*.ino,*.vert,*.frag map <leader>f :ClangFormat<CR>
    autocmd BufNewFile,BufRead *.js,*.ts map <leader>f :PrettierAsync<CR>
    autocmd BufNewFile,BufRead *.py map <leader>f :Black<CR>

    " YCM settings
    "Closes YouCompleteMe window after completion
    let g:ycm_autoclose_preview_window_after_insertion = 1
    " YCM set extra config file
    let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
    " let g:ycm_use_clangd=1
    let g:ycm_clangd_binary_path = '/usr/bin/clangd'
    let g:ycm_clangd_args = ['--limit-references=0', '--limit-results=0', '--header-insertion=never', '--log=verbose', '--query-driver=/usr/bin/g++', '--query-driver=/usr/bin/gcc', '--query-driver=/usr/local/cuda/bin/nvcc', '--enable-config', '--clang-tidy']
    let g:ycm_clangd_uses_ycmd_caching = 0
    let g:ycm_max_diagnostics_to_display = 0
    let g:ycm_complete_in_comments = 1 
    let g:ycm_seed_identifiers_with_syntax = 1 
    let g:ycm_collect_identifiers_from_comments_and_strings = 1

    map <F2> :YcmCompleter FixIt<CR>
    map <leader>g :YcmCompleter GoTo<CR>
    map <leader>G :YcmCompleter GoToDefinition<CR>
    map <leader>t :YcmCompleter GetType<CR>
    map <leader>h :YcmCompleter GoToAlternateFile<CR>
    map <leader>r :YcmCompleter RefactorRename 
    map <leader>R :YcmCompleter GoToReferences<CR>
else
    source ~/.config/nvim/lua/init.lua

    setlocal cursorline
    setlocal cursorcolumn

    nnoremap <buffer> K <cmd>lua vim.lsp.buf.hover()<cr>
    nnoremap <buffer> gd <cmd>lua vim.lsp.buf.definition()<cr>
    nnoremap <buffer> gD <cmd>lua vim.lsp.buf.declaration()<cr>
    nnoremap <buffer> gi <cmd>lua vim.lsp.buf.implementation()<cr>
    nnoremap <buffer> gt <cmd>lua vim.lsp.buf.type_definition()<cr>
    nnoremap <buffer> gr <cmd>lua vim.lsp.buf.references()<cr>
    nnoremap <buffer> <C-k> <cmd>lua vim.lsp.buf.signature_help()<cr>
    nnoremap <buffer> <F3> <cmd>lua vim.lsp.buf.rename()<cr>

    nnoremap <silent> <Leader>dd <Cmd>lua require'dap'.continue()<CR>
    nnoremap <silent> <Leader>ds <Cmd>lua require'dap'.step_over()<CR>
    nnoremap <silent> <Leader>di <Cmd>lua require'dap'.step_into()<CR>
    nnoremap <silent> <Leader>do <Cmd>lua require'dap'.step_out()<CR>
    nnoremap <silent> <Leader>db <Cmd>lua require'dap'.toggle_breakpoint()<CR>
    nnoremap <silent> <Leader>dB <Cmd>lua require'dap'.set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>
    nnoremap <silent> <Leader>lp <Cmd>lua require'dap'.set_breakpoint(nil, nil, vim.fn.input('Log point message: '))<CR>
    nnoremap <silent> <Leader>dr <Cmd>lua require'dap'.repl.open()<CR>
    nnoremap <silent> <Leader>dl <Cmd>lua require'dap'.run_last()<CR>
    nnoremap <silent> <Leader>dl <Cmd>lua require'dap'.run_last()<CR>
    nnoremap <silent> <Leader>dq <Cmd>lua require'dap'.close(); require("dapui").close()<CR>
endif

" If fuzzy finder installed using git
set rtp+=~/.fzf

imap <C-F> <C-G>g

"Custom key-maps"
map <F6> :JupyterRunFile<CR>
map <F5> :JupyterSendCell<CR>
map <F8> :PythonSetBreak<CR>
map <F9> :JupyterRunFile %:p --verbose --plot <CR>
map <F11> :JupyterCd %:p:h<CR>
map <F12> :JupyterConnect<CR>

map <C-c> "+y
map <leader><C-c> "+yy

map <leader>b :bp<CR>
map <leader>n :bn<CR>

map <leader>1 :b 1<CR>
map <leader>2 :b 2<CR>
map <leader>3 :b 3<CR>
map <leader>4 :b 4<CR>
map <leader>5 :b 5<CR>
map <leader>6 :b 6<CR>
map <leader>7 :b 7<CR>
map <leader>8 :b 8<CR>
map <leader>9 :b 9<CR>

nnoremap <leader>u :UndotreeToggle<CR>

nnoremap <C-p> "0p

packadd! matchit
let b:match_words = '<<<<<<<:=======:>>>>>>>'

" Make Y yank till end of line
nnoremap Y y$

"Timeout
set timeoutlen=1000
set ttimeoutlen=5

au BufNewFile,BufRead *.py set encoding=utf-8
au BufNewFile,BufRead *.py set tabstop=4

autocmd FileType make set noexpandtab shiftwidth=8 softtabstop=0
autocmd BufNewFile,BufRead *.cjs   set syntax=typescript
autocmd BufNewFile,BufRead *.cjs   set filetype=typescript

" Spell check
set spell spelllang=en_us
au BufRead,BufNewFile *.md,*.txt,*.tex set spell spelllang=en_us
autocmd FileType markdown set spell spelllang=en_us
autocmd FileType gitcommit set spell spelllang=en_us
syntax spell toplevel

" hi clear SpellBad
hi SpellBad cterm=underline
" Set style for gVim
hi SpellBad gui=undercurl

"No python line splits
set formatoptions-=tc

" Folding settings
filetype plugin indent on " required
autocmd Filetype * AnyFoldActivate               " activate for all filetypes
set foldlevel=99

" let @d = 'yy,h/private p==0/:: bcâï¿½Ã½ad2f:f{hC;âï¿½Ã½a'
let @d = 'yy,h/privatep==0/::bcýad2f:f{hC;ýa'

" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>
nnoremap <leader>fr <cmd>Telescope resume<cr>

" Splits
set splitright
set splitbelow
